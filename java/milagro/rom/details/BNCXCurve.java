package milagro.rom.details;

import milagro.rom.field.FieldDetails;

public class BNCXCurve implements CurveDetails {

	// BNCX Curve

	public static final int CURVETYPE = FieldDetails.WEIERSTRASS;
	public static final int CURVE_A = 0;
	
	public static final int[] CURVE_B = { 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
	public static final int[] CURVE_Order = { 0x16EB1F6D, 0x108E0531, 0x1241B3AF, 0x1FADDC19, 0x166D2C43, 0xFB23D31, 0x836C2F7, 0x10E05, 0x240000 };
	public static final int[] CURVE_Bnx = { 0x3C012B1, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
	public static final int[] CURVE_Cru = { 0x14235C97, 0xF0498BC, 0x1BE1D58C, 0x1BBEC8E3, 0x3F1440B, 0x654, 0x12000, 0x0, 0x0 };
	public static final int[] CURVE_Fra = { 0x15C80EA3, 0x1EC8419A, 0x1CFE0856, 0xEE64DE2, 0x11898686, 0x5C55653, 0x592BF86, 0x5F4C740, 0x135908 };
	public static final int[] CURVE_Frb = { 0x6534710, 0x1468DDE0, 0x551B018, 0x10C78E4D, 0x4E3ABBD, 0x9ECE6DE, 0x2A40371, 0x1A0C46C5, 0x10A6F7 };
	public static final int[] CURVE_Pxa = { 0x4D2EC74, 0x428E777, 0xF89C9B0, 0x190B7F40, 0x14BBB907, 0x12807AE1, 0x958D62C, 0x58E0A76, 0x19682D };
	public static final int[] CURVE_Pxb = { 0xE29CFE1, 0x1D2C7459, 0x270C3D1, 0x172F6184, 0x19743F81, 0x49BD474, 0x192A8047, 0x1D87C33E, 0x1466B9 };
	public static final int[] CURVE_Pya = { 0xF0BE09F, 0x7DFE75E, 0x1FB06CC3, 0x3667B08, 0xE209636, 0x110ABED7, 0xE376078, 0x1B2E4665, 0xA79ED };
	public static final int[] CURVE_Pyb = { 0x898EE9D, 0xC825914, 0x14BB7AFB, 0xC9D4AD3, 0x13461C28, 0x122896C6, 0x240D71B, 0x73D9898, 0x6160C };
	public static final int[] CURVE_Gx = { 0x1C1B55B2, 0x13311F7A, 0x24FB86F, 0x1FADDC30, 0x166D3243, 0xFB23D31, 0x836C2F7, 0x10E05, 0x240000 };
	public static final int[] CURVE_Gy = { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
	
	public static final int[][] CURVE_W = { { 0x162FEB83, 0x2A31A48, 0x100E0480, 0x16, 0x600, 0x0, 0x0, 0x0, 0x0 }, { 0x7802561, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
	public static final int[][][] CURVE_SB = { { { 0x1DB010E4, 0x2A31A48, 0x100E04A0, 0x16, 0x600, 0x0, 0x0, 0x0, 0x0 }, { 0x7802561, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } }, { { 0x7802561, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0xBB33EA, 0xDEAEAE9, 0x233AF2F, 0x1FADDC03, 0x166D2643, 0xFB23D31, 0x836C2F7, 0x10E05, 0x240000 } } };
	public static final int[][] CURVE_WB = { { 0x167A84B0, 0xE108C2, 0x1004AC10, 0x7, 0x200, 0x0, 0x0, 0x0, 0x0 }, { 0x1E220475, 0x166FCCAD, 0x129FE68D, 0x1D29DB51, 0x2A0DC07, 0x438, 0xC000, 0x0, 0x0 }, { 0xF10B93, 0x1B37E657, 0x194FF34E, 0x1E94EDA8, 0x1506E03, 0x21C, 0x6000, 0x0, 0x0 }, { 0x1DFAAA11, 0xE108C2, 0x1004AC30, 0x7, 0x200, 0x0, 0x0, 0x0, 0x0 } };
	public static final int[][][] CURVE_BB = { { { 0x132B0CBD, 0x108E0531, 0x1241B39F, 0x1FADDC19, 0x166D2C43, 0xFB23D31, 0x836C2F7, 0x10E05, 0x240000 }, { 0x132B0CBC, 0x108E0531, 0x1241B39F, 0x1FADDC19, 0x166D2C43, 0xFB23D31, 0x836C2F7, 0x10E05, 0x240000 }, { 0x132B0CBC, 0x108E0531, 0x1241B39F, 0x1FADDC19, 0x166D2C43, 0xFB23D31, 0x836C2F7, 0x10E05, 0x240000 }, { 0x7802562, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } }, { { 0x7802561, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0x132B0CBC, 0x108E0531, 0x1241B39F, 0x1FADDC19, 0x166D2C43, 0xFB23D31, 0x836C2F7, 0x10E05, 0x240000 }, { 0x132B0CBD, 0x108E0531, 0x1241B39F, 0x1FADDC19, 0x166D2C43, 0xFB23D31, 0x836C2F7, 0x10E05, 0x240000 }, { 0x132B0CBC, 0x108E0531, 0x1241B39F, 0x1FADDC19, 0x166D2C43, 0xFB23D31, 0x836C2F7, 0x10E05, 0x240000 } }, { { 0x7802562, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0x7802561, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0x7802561, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0x7802561, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } }, { { 0x3C012B2, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0xF004AC2, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0xF6AFA0A, 0x108E0531, 0x1241B38F, 0x1FADDC19, 0x166D2C43, 0xFB23D31, 0x836C2F7, 0x10E05, 0x240000 }, { 0x3C012B2, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } } };
	
	@Override
	public int getCurveType() {
		return CURVETYPE;
	}
	@Override
	public int getCurveA() {
		return CURVE_A;
	}
	@Override
	public int[] getCurveB() {
		return CURVE_B;
	}
	@Override
	public int[] getCurveOrder() {
		return CURVE_Order;
	}
	@Override
	public int[] getCurveBnx() {
		return CURVE_Bnx;
	}
	@Override
	public int[] getCurveCru() {
		return CURVE_Cru;
	}
	@Override
	public int[] getCurveFra() {
		return CURVE_Fra;
	}
	@Override
	public int[] getCurveFrb() {
		return CURVE_Frb;
	}
	@Override
	public int[] getCurvePxa() {
		return CURVE_Pxa;
	}
	@Override
	public int[] getCurvePxb() {
		return CURVE_Pxb;
	}
	@Override
	public int[] getCurvePya() {
		return CURVE_Pya;
	}
	@Override
	public int[] getCurvePyb() {
		return CURVE_Pyb;
	}
	@Override
	public int[] getCurveGx() {
		return CURVE_Gx;
	}
	@Override
	public int[] getCurveGy() {
		return CURVE_Gy;
	}
	@Override
	public int[][] getCurveW() {
		return CURVE_W;
	}
	@Override
	public int[][][] getCurveSB() {
		return CURVE_SB;
	}
	@Override
	public int[][] getCurveWB() {
		return CURVE_WB;
	}
	@Override
	public int[][][] getCurveBB() {
		return CURVE_BB;
	}

}
