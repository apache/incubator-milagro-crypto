package milagro.rom.details;

import milagro.rom.field.FieldDetails;

public class BNT2Curve implements CurveDetails {

	// BNT2 Curve

	public static final int CURVETYPE = FieldDetails.WEIERSTRASS;
	public static final int CURVE_A = 0;
	
	public static final int[] CURVE_B = { 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
	public static final int[] CURVE_Order = { 0x11AA2BF5, 0x1FDB8D28, 0xDCE0CF5, 0x1F1BC24F, 0x1D00021C, 0x10079DC4, 0xAB6DD38, 0x104821EB, 0x240004 };
	public static final int[] CURVE_Bnx = { 0x608205, 0x1008, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
	public static final int[] CURVE_Cru = { 0x866BD33, 0x1A813A22, 0x591C3BE, 0xAB6EE60, 0x1ECF2367, 0x361B0BD, 0x12000, 0x0, 0x0 };
	public static final int[] CURVE_Fra = { 0x13AEF062, 0x1593464B, 0x10EF3924, 0x198D3667, 0x17F195BB, 0xFB3FD1, 0xADAF429, 0x11A53D19, 0x124E0B };
	public static final int[] CURVE_Frb = { 0xB1B429, 0x10039B12, 0xB465B55, 0x59A91EA, 0x50E7261, 0xF0C5DF3, 0x1FDBE90F, 0x1EA2E4D1, 0x11B1F8 };
	public static final int[] CURVE_Pxa = { 0x1F40A3C8, 0x166491CC, 0x19845E12, 0xB9B49D2, 0x161706B3, 0xBBD82B4, 0x18C609E7, 0x19F2D278, 0x16FC17 };
	public static final int[] CURVE_Pxb = { 0x18549540, 0x2ABD456, 0x1D944184, 0x16DEF7CD, 0x1A95D17D, 0x42B2C83, 0x16427206, 0x17AB2E, 0x1EB5B5 };
	public static final int[] CURVE_Pya = { 0x14220513, 0x3DF6628, 0x39CDEC5, 0x894F10C, 0x135F1268, 0x1D28DC1C, 0xAAA7537, 0x130EC284, 0x1E8EE4 };
	public static final int[] CURVE_Pyb = { 0x177CE78E, 0x1DC9947A, 0x1BE95E07, 0x1D6E8DC4, 0x1FB8E27, 0x1B549EDE, 0xF6E8A75, 0x19B75C67, 0x23CEF4 };
	public static final int[] CURVE_Gx = { 0x1460A48A, 0x596E15D, 0x1C35947A, 0x1F27C851, 0x1D00081C, 0x10079DC4, 0xAB6DD38, 0x104821EB, 0x240004 };
	public static final int[] CURVE_Gy = { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
	
	public static final int[][] CURVE_W = { { 0x1347083, 0x5BB1415, 0xE678744, 0xC0602, 0x600, 0x0, 0x0, 0x0, 0x0 }, { 0xC10409, 0x2010, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } };
	public static final int[][][] CURVE_SB = { { { 0x1F5748C, 0x5BB3425, 0xE678764, 0xC0602, 0x600, 0x0, 0x0, 0x0, 0x0 }, { 0xC10409, 0x2010, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } }, { { 0xC10409, 0x2010, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0x1075BB72, 0x1A207913, 0x1F6685B1, 0x1F0FBC4C, 0x1CFFFC1C, 0x10079DC4, 0xAB6DD38, 0x104821EB, 0x240004 } } };
	public static final int[][] CURVE_WB = { { 0xA70A224, 0xC9396A4, 0x1A228251, 0x40200, 0x200, 0x0, 0x0, 0x0, 0x0 }, { 0x1030EF19, 0xAD2B967, 0xD50DC87, 0x72CA2EC, 0x148A1B9A, 0x241207E, 0xC000, 0x0, 0x0 }, { 0x1848B88F, 0x156964B7, 0x6A86E4B, 0x3965176, 0xA450DCD, 0x120903F, 0x6000, 0x0, 0x0 }, { 0xB31A62D, 0xC93B6B4, 0x1A228271, 0x40200, 0x200, 0x0, 0x0, 0x0, 0x0 } };
	public static final int[][][] CURVE_BB = { { { 0x1149A9F1, 0x1FDB7D20, 0xDCE0CE5, 0x1F1BC24F, 0x1D00021C, 0x10079DC4, 0xAB6DD38, 0x104821EB, 0x240004 }, { 0x1149A9F0, 0x1FDB7D20, 0xDCE0CE5, 0x1F1BC24F, 0x1D00021C, 0x10079DC4, 0xAB6DD38, 0x104821EB, 0x240004 }, { 0x1149A9F0, 0x1FDB7D20, 0xDCE0CE5, 0x1F1BC24F, 0x1D00021C, 0x10079DC4, 0xAB6DD38, 0x104821EB, 0x240004 }, { 0xC1040A, 0x2010, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } }, { { 0xC10409, 0x2010, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0x1149A9F0, 0x1FDB7D20, 0xDCE0CE5, 0x1F1BC24F, 0x1D00021C, 0x10079DC4, 0xAB6DD38, 0x104821EB, 0x240004 }, { 0x1149A9F1, 0x1FDB7D20, 0xDCE0CE5, 0x1F1BC24F, 0x1D00021C, 0x10079DC4, 0xAB6DD38, 0x104821EB, 0x240004 }, { 0x1149A9F0, 0x1FDB7D20, 0xDCE0CE5, 0x1F1BC24F, 0x1D00021C, 0x10079DC4, 0xAB6DD38, 0x104821EB, 0x240004 } }, { { 0xC1040A, 0x2010, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0xC10409, 0x2010, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0xC10409, 0x2010, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0xC10409, 0x2010, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } }, { { 0x608206, 0x1008, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0x1820812, 0x4020, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0x10E927EA, 0x1FDB6D18, 0xDCE0CD5, 0x1F1BC24F, 0x1D00021C, 0x10079DC4, 0xAB6DD38, 0x104821EB, 0x240004 }, { 0x608206, 0x1008, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 } } };

	@Override
	public int getCurveType() {
		return CURVETYPE;
	}

	@Override
	public int getCurveA() {
		return CURVE_A;
	}

	@Override
	public int[] getCurveB() {
		return CURVE_B;
	}

	@Override
	public int[] getCurveOrder() {
		return CURVE_Order;
	}

	@Override
	public int[] getCurveBnx() {
		return CURVE_Bnx;
	}

	@Override
	public int[] getCurveCru() {
		return CURVE_Cru;
	}

	@Override
	public int[] getCurveFra() {
		return CURVE_Fra;
	}

	@Override
	public int[] getCurveFrb() {
		return CURVE_Frb;
	}

	@Override
	public int[] getCurvePxa() {
		return CURVE_Pxa;
	}

	@Override
	public int[] getCurvePxb() {
		return CURVE_Pxb;
	}

	@Override
	public int[] getCurvePya() {
		return CURVE_Pya;
	}

	@Override
	public int[] getCurvePyb() {
		return CURVE_Pyb;
	}

	@Override
	public int[] getCurveGx() {
		return CURVE_Gx;
	}

	@Override
	public int[] getCurveGy() {
		return CURVE_Gy;
	}

	@Override
	public int[][] getCurveW() {
		return CURVE_W;
	}

	@Override
	public int[][][] getCurveSB() {
		return CURVE_SB;
	}

	@Override
	public int[][] getCurveWB() {
		return CURVE_WB;
	}

	@Override
	public int[][][] getCurveBB() {
		return CURVE_BB;
	}

}
